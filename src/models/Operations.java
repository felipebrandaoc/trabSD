/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Operations {

  public interface Iface {

    public void carregaGrafo(String caminho) throws org.apache.thrift.TException;

    public void salvaGrafo(String caminho) throws org.apache.thrift.TException;

    public boolean addVertice(int nome, int cor, String descricao, double peso) throws org.apache.thrift.TException;

    public boolean addAresta(int v1, int v2, double peso, boolean direcao, String descricao) throws org.apache.thrift.TException;

    public boolean delVertice(int nome) throws org.apache.thrift.TException;

    public boolean delAresta(int v1, int v2) throws org.apache.thrift.TException;

    public boolean upVertice(int nomeUp, Vertice V) throws org.apache.thrift.TException;

    public boolean upAresta(int nomeV1, int nomeV2, Aresta A) throws org.apache.thrift.TException;

    public Vertice getVertice(int nome) throws org.apache.thrift.TException;

    public Aresta getAresta(int v1, int v2, boolean flag) throws org.apache.thrift.TException;

    public String exibeGrafo() throws org.apache.thrift.TException;

    public String exibeVertice(boolean flag) throws org.apache.thrift.TException;

    public String exibeAresta(boolean flag) throws org.apache.thrift.TException;

    public String listarArestasVertice(int nomeV, boolean flag) throws org.apache.thrift.TException;

    public String listarVizinhosVertice(int nomeV) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void carregaGrafo(String caminho, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void salvaGrafo(String caminho, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addVertice(int nome, int cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addAresta(int v1, int v2, double peso, boolean direcao, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delVertice(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delAresta(int v1, int v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void upVertice(int nomeUp, Vertice V, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void upAresta(int nomeV1, int nomeV2, Aresta A, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVertice(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAresta(int v1, int v2, boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exibeGrafo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exibeVertice(boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exibeAresta(boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listarArestasVertice(int nomeV, boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listarVizinhosVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void carregaGrafo(String caminho) throws org.apache.thrift.TException
    {
      send_carregaGrafo(caminho);
      recv_carregaGrafo();
    }

    public void send_carregaGrafo(String caminho) throws org.apache.thrift.TException
    {
      carregaGrafo_args args = new carregaGrafo_args();
      args.setCaminho(caminho);
      sendBase("carregaGrafo", args);
    }

    public void recv_carregaGrafo() throws org.apache.thrift.TException
    {
      carregaGrafo_result result = new carregaGrafo_result();
      receiveBase(result, "carregaGrafo");
      return;
    }

    public void salvaGrafo(String caminho) throws org.apache.thrift.TException
    {
      send_salvaGrafo(caminho);
      recv_salvaGrafo();
    }

    public void send_salvaGrafo(String caminho) throws org.apache.thrift.TException
    {
      salvaGrafo_args args = new salvaGrafo_args();
      args.setCaminho(caminho);
      sendBase("salvaGrafo", args);
    }

    public void recv_salvaGrafo() throws org.apache.thrift.TException
    {
      salvaGrafo_result result = new salvaGrafo_result();
      receiveBase(result, "salvaGrafo");
      return;
    }

    public boolean addVertice(int nome, int cor, String descricao, double peso) throws org.apache.thrift.TException
    {
      send_addVertice(nome, cor, descricao, peso);
      return recv_addVertice();
    }

    public void send_addVertice(int nome, int cor, String descricao, double peso) throws org.apache.thrift.TException
    {
      addVertice_args args = new addVertice_args();
      args.setNome(nome);
      args.setCor(cor);
      args.setDescricao(descricao);
      args.setPeso(peso);
      sendBase("addVertice", args);
    }

    public boolean recv_addVertice() throws org.apache.thrift.TException
    {
      addVertice_result result = new addVertice_result();
      receiveBase(result, "addVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVertice failed: unknown result");
    }

    public boolean addAresta(int v1, int v2, double peso, boolean direcao, String descricao) throws org.apache.thrift.TException
    {
      send_addAresta(v1, v2, peso, direcao, descricao);
      return recv_addAresta();
    }

    public void send_addAresta(int v1, int v2, double peso, boolean direcao, String descricao) throws org.apache.thrift.TException
    {
      addAresta_args args = new addAresta_args();
      args.setV1(v1);
      args.setV2(v2);
      args.setPeso(peso);
      args.setDirecao(direcao);
      args.setDescricao(descricao);
      sendBase("addAresta", args);
    }

    public boolean recv_addAresta() throws org.apache.thrift.TException
    {
      addAresta_result result = new addAresta_result();
      receiveBase(result, "addAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAresta failed: unknown result");
    }

    public boolean delVertice(int nome) throws org.apache.thrift.TException
    {
      send_delVertice(nome);
      return recv_delVertice();
    }

    public void send_delVertice(int nome) throws org.apache.thrift.TException
    {
      delVertice_args args = new delVertice_args();
      args.setNome(nome);
      sendBase("delVertice", args);
    }

    public boolean recv_delVertice() throws org.apache.thrift.TException
    {
      delVertice_result result = new delVertice_result();
      receiveBase(result, "delVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delVertice failed: unknown result");
    }

    public boolean delAresta(int v1, int v2) throws org.apache.thrift.TException
    {
      send_delAresta(v1, v2);
      return recv_delAresta();
    }

    public void send_delAresta(int v1, int v2) throws org.apache.thrift.TException
    {
      delAresta_args args = new delAresta_args();
      args.setV1(v1);
      args.setV2(v2);
      sendBase("delAresta", args);
    }

    public boolean recv_delAresta() throws org.apache.thrift.TException
    {
      delAresta_result result = new delAresta_result();
      receiveBase(result, "delAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delAresta failed: unknown result");
    }

    public boolean upVertice(int nomeUp, Vertice V) throws org.apache.thrift.TException
    {
      send_upVertice(nomeUp, V);
      return recv_upVertice();
    }

    public void send_upVertice(int nomeUp, Vertice V) throws org.apache.thrift.TException
    {
      upVertice_args args = new upVertice_args();
      args.setNomeUp(nomeUp);
      args.setV(V);
      sendBase("upVertice", args);
    }

    public boolean recv_upVertice() throws org.apache.thrift.TException
    {
      upVertice_result result = new upVertice_result();
      receiveBase(result, "upVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upVertice failed: unknown result");
    }

    public boolean upAresta(int nomeV1, int nomeV2, Aresta A) throws org.apache.thrift.TException
    {
      send_upAresta(nomeV1, nomeV2, A);
      return recv_upAresta();
    }

    public void send_upAresta(int nomeV1, int nomeV2, Aresta A) throws org.apache.thrift.TException
    {
      upAresta_args args = new upAresta_args();
      args.setNomeV1(nomeV1);
      args.setNomeV2(nomeV2);
      args.setA(A);
      sendBase("upAresta", args);
    }

    public boolean recv_upAresta() throws org.apache.thrift.TException
    {
      upAresta_result result = new upAresta_result();
      receiveBase(result, "upAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upAresta failed: unknown result");
    }

    public Vertice getVertice(int nome) throws org.apache.thrift.TException
    {
      send_getVertice(nome);
      return recv_getVertice();
    }

    public void send_getVertice(int nome) throws org.apache.thrift.TException
    {
      getVertice_args args = new getVertice_args();
      args.setNome(nome);
      sendBase("getVertice", args);
    }

    public Vertice recv_getVertice() throws org.apache.thrift.TException
    {
      getVertice_result result = new getVertice_result();
      receiveBase(result, "getVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVertice failed: unknown result");
    }

    public Aresta getAresta(int v1, int v2, boolean flag) throws org.apache.thrift.TException
    {
      send_getAresta(v1, v2, flag);
      return recv_getAresta();
    }

    public void send_getAresta(int v1, int v2, boolean flag) throws org.apache.thrift.TException
    {
      getAresta_args args = new getAresta_args();
      args.setV1(v1);
      args.setV2(v2);
      args.setFlag(flag);
      sendBase("getAresta", args);
    }

    public Aresta recv_getAresta() throws org.apache.thrift.TException
    {
      getAresta_result result = new getAresta_result();
      receiveBase(result, "getAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAresta failed: unknown result");
    }

    public String exibeGrafo() throws org.apache.thrift.TException
    {
      send_exibeGrafo();
      return recv_exibeGrafo();
    }

    public void send_exibeGrafo() throws org.apache.thrift.TException
    {
      exibeGrafo_args args = new exibeGrafo_args();
      sendBase("exibeGrafo", args);
    }

    public String recv_exibeGrafo() throws org.apache.thrift.TException
    {
      exibeGrafo_result result = new exibeGrafo_result();
      receiveBase(result, "exibeGrafo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exibeGrafo failed: unknown result");
    }

    public String exibeVertice(boolean flag) throws org.apache.thrift.TException
    {
      send_exibeVertice(flag);
      return recv_exibeVertice();
    }

    public void send_exibeVertice(boolean flag) throws org.apache.thrift.TException
    {
      exibeVertice_args args = new exibeVertice_args();
      args.setFlag(flag);
      sendBase("exibeVertice", args);
    }

    public String recv_exibeVertice() throws org.apache.thrift.TException
    {
      exibeVertice_result result = new exibeVertice_result();
      receiveBase(result, "exibeVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exibeVertice failed: unknown result");
    }

    public String exibeAresta(boolean flag) throws org.apache.thrift.TException
    {
      send_exibeAresta(flag);
      return recv_exibeAresta();
    }

    public void send_exibeAresta(boolean flag) throws org.apache.thrift.TException
    {
      exibeAresta_args args = new exibeAresta_args();
      args.setFlag(flag);
      sendBase("exibeAresta", args);
    }

    public String recv_exibeAresta() throws org.apache.thrift.TException
    {
      exibeAresta_result result = new exibeAresta_result();
      receiveBase(result, "exibeAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exibeAresta failed: unknown result");
    }

    public String listarArestasVertice(int nomeV, boolean flag) throws org.apache.thrift.TException
    {
      send_listarArestasVertice(nomeV, flag);
      return recv_listarArestasVertice();
    }

    public void send_listarArestasVertice(int nomeV, boolean flag) throws org.apache.thrift.TException
    {
      listarArestasVertice_args args = new listarArestasVertice_args();
      args.setNomeV(nomeV);
      args.setFlag(flag);
      sendBase("listarArestasVertice", args);
    }

    public String recv_listarArestasVertice() throws org.apache.thrift.TException
    {
      listarArestasVertice_result result = new listarArestasVertice_result();
      receiveBase(result, "listarArestasVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listarArestasVertice failed: unknown result");
    }

    public String listarVizinhosVertice(int nomeV) throws org.apache.thrift.TException
    {
      send_listarVizinhosVertice(nomeV);
      return recv_listarVizinhosVertice();
    }

    public void send_listarVizinhosVertice(int nomeV) throws org.apache.thrift.TException
    {
      listarVizinhosVertice_args args = new listarVizinhosVertice_args();
      args.setNomeV(nomeV);
      sendBase("listarVizinhosVertice", args);
    }

    public String recv_listarVizinhosVertice() throws org.apache.thrift.TException
    {
      listarVizinhosVertice_result result = new listarVizinhosVertice_result();
      receiveBase(result, "listarVizinhosVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listarVizinhosVertice failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void carregaGrafo(String caminho, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      carregaGrafo_call method_call = new carregaGrafo_call(caminho, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class carregaGrafo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String caminho;
      public carregaGrafo_call(String caminho, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caminho = caminho;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("carregaGrafo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        carregaGrafo_args args = new carregaGrafo_args();
        args.setCaminho(caminho);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_carregaGrafo();
      }
    }

    public void salvaGrafo(String caminho, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      salvaGrafo_call method_call = new salvaGrafo_call(caminho, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class salvaGrafo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String caminho;
      public salvaGrafo_call(String caminho, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caminho = caminho;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("salvaGrafo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        salvaGrafo_args args = new salvaGrafo_args();
        args.setCaminho(caminho);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_salvaGrafo();
      }
    }

    public void addVertice(int nome, int cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVertice_call method_call = new addVertice_call(nome, cor, descricao, peso, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nome;
      private int cor;
      private String descricao;
      private double peso;
      public addVertice_call(int nome, int cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
        this.cor = cor;
        this.descricao = descricao;
        this.peso = peso;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVertice_args args = new addVertice_args();
        args.setNome(nome);
        args.setCor(cor);
        args.setDescricao(descricao);
        args.setPeso(peso);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVertice();
      }
    }

    public void addAresta(int v1, int v2, double peso, boolean direcao, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAresta_call method_call = new addAresta_call(v1, v2, peso, direcao, descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int v1;
      private int v2;
      private double peso;
      private boolean direcao;
      private String descricao;
      public addAresta_call(int v1, int v2, double peso, boolean direcao, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
        this.peso = peso;
        this.direcao = direcao;
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAresta_args args = new addAresta_args();
        args.setV1(v1);
        args.setV2(v2);
        args.setPeso(peso);
        args.setDirecao(direcao);
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAresta();
      }
    }

    public void delVertice(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delVertice_call method_call = new delVertice_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nome;
      public delVertice_call(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delVertice_args args = new delVertice_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delVertice();
      }
    }

    public void delAresta(int v1, int v2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delAresta_call method_call = new delAresta_call(v1, v2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int v1;
      private int v2;
      public delAresta_call(int v1, int v2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delAresta_args args = new delAresta_args();
        args.setV1(v1);
        args.setV2(v2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delAresta();
      }
    }

    public void upVertice(int nomeUp, Vertice V, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upVertice_call method_call = new upVertice_call(nomeUp, V, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nomeUp;
      private Vertice V;
      public upVertice_call(int nomeUp, Vertice V, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeUp = nomeUp;
        this.V = V;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        upVertice_args args = new upVertice_args();
        args.setNomeUp(nomeUp);
        args.setV(V);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_upVertice();
      }
    }

    public void upAresta(int nomeV1, int nomeV2, Aresta A, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upAresta_call method_call = new upAresta_call(nomeV1, nomeV2, A, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nomeV1;
      private int nomeV2;
      private Aresta A;
      public upAresta_call(int nomeV1, int nomeV2, Aresta A, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV1 = nomeV1;
        this.nomeV2 = nomeV2;
        this.A = A;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        upAresta_args args = new upAresta_args();
        args.setNomeV1(nomeV1);
        args.setNomeV2(nomeV2);
        args.setA(A);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_upAresta();
      }
    }

    public void getVertice(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVertice_call method_call = new getVertice_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nome;
      public getVertice_call(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVertice_args args = new getVertice_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vertice getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVertice();
      }
    }

    public void getAresta(int v1, int v2, boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAresta_call method_call = new getAresta_call(v1, v2, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int v1;
      private int v2;
      private boolean flag;
      public getAresta_call(int v1, int v2, boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v1 = v1;
        this.v2 = v2;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAresta_args args = new getAresta_args();
        args.setV1(v1);
        args.setV2(v2);
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Aresta getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAresta();
      }
    }

    public void exibeGrafo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exibeGrafo_call method_call = new exibeGrafo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exibeGrafo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public exibeGrafo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exibeGrafo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exibeGrafo_args args = new exibeGrafo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exibeGrafo();
      }
    }

    public void exibeVertice(boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exibeVertice_call method_call = new exibeVertice_call(flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exibeVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean flag;
      public exibeVertice_call(boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exibeVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exibeVertice_args args = new exibeVertice_args();
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exibeVertice();
      }
    }

    public void exibeAresta(boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exibeAresta_call method_call = new exibeAresta_call(flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exibeAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean flag;
      public exibeAresta_call(boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exibeAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exibeAresta_args args = new exibeAresta_args();
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exibeAresta();
      }
    }

    public void listarArestasVertice(int nomeV, boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarArestasVertice_call method_call = new listarArestasVertice_call(nomeV, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarArestasVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nomeV;
      private boolean flag;
      public listarArestasVertice_call(int nomeV, boolean flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV = nomeV;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarArestasVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarArestasVertice_args args = new listarArestasVertice_args();
        args.setNomeV(nomeV);
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listarArestasVertice();
      }
    }

    public void listarVizinhosVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarVizinhosVertice_call method_call = new listarVizinhosVertice_call(nomeV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarVizinhosVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nomeV;
      public listarVizinhosVertice_call(int nomeV, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV = nomeV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarVizinhosVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarVizinhosVertice_args args = new listarVizinhosVertice_args();
        args.setNomeV(nomeV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listarVizinhosVertice();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("carregaGrafo", new carregaGrafo());
      processMap.put("salvaGrafo", new salvaGrafo());
      processMap.put("addVertice", new addVertice());
      processMap.put("addAresta", new addAresta());
      processMap.put("delVertice", new delVertice());
      processMap.put("delAresta", new delAresta());
      processMap.put("upVertice", new upVertice());
      processMap.put("upAresta", new upAresta());
      processMap.put("getVertice", new getVertice());
      processMap.put("getAresta", new getAresta());
      processMap.put("exibeGrafo", new exibeGrafo());
      processMap.put("exibeVertice", new exibeVertice());
      processMap.put("exibeAresta", new exibeAresta());
      processMap.put("listarArestasVertice", new listarArestasVertice());
      processMap.put("listarVizinhosVertice", new listarVizinhosVertice());
      return processMap;
    }

    public static class carregaGrafo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, carregaGrafo_args> {
      public carregaGrafo() {
        super("carregaGrafo");
      }

      public carregaGrafo_args getEmptyArgsInstance() {
        return new carregaGrafo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public carregaGrafo_result getResult(I iface, carregaGrafo_args args) throws org.apache.thrift.TException {
        carregaGrafo_result result = new carregaGrafo_result();
        iface.carregaGrafo(args.caminho);
        return result;
      }
    }

    public static class salvaGrafo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, salvaGrafo_args> {
      public salvaGrafo() {
        super("salvaGrafo");
      }

      public salvaGrafo_args getEmptyArgsInstance() {
        return new salvaGrafo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public salvaGrafo_result getResult(I iface, salvaGrafo_args args) throws org.apache.thrift.TException {
        salvaGrafo_result result = new salvaGrafo_result();
        iface.salvaGrafo(args.caminho);
        return result;
      }
    }

    public static class addVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVertice_args> {
      public addVertice() {
        super("addVertice");
      }

      public addVertice_args getEmptyArgsInstance() {
        return new addVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVertice_result getResult(I iface, addVertice_args args) throws org.apache.thrift.TException {
        addVertice_result result = new addVertice_result();
        result.success = iface.addVertice(args.nome, args.cor, args.descricao, args.peso);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAresta_args> {
      public addAresta() {
        super("addAresta");
      }

      public addAresta_args getEmptyArgsInstance() {
        return new addAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAresta_result getResult(I iface, addAresta_args args) throws org.apache.thrift.TException {
        addAresta_result result = new addAresta_result();
        result.success = iface.addAresta(args.v1, args.v2, args.peso, args.direcao, args.descricao);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delVertice_args> {
      public delVertice() {
        super("delVertice");
      }

      public delVertice_args getEmptyArgsInstance() {
        return new delVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delVertice_result getResult(I iface, delVertice_args args) throws org.apache.thrift.TException {
        delVertice_result result = new delVertice_result();
        result.success = iface.delVertice(args.nome);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delAresta_args> {
      public delAresta() {
        super("delAresta");
      }

      public delAresta_args getEmptyArgsInstance() {
        return new delAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delAresta_result getResult(I iface, delAresta_args args) throws org.apache.thrift.TException {
        delAresta_result result = new delAresta_result();
        result.success = iface.delAresta(args.v1, args.v2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class upVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upVertice_args> {
      public upVertice() {
        super("upVertice");
      }

      public upVertice_args getEmptyArgsInstance() {
        return new upVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public upVertice_result getResult(I iface, upVertice_args args) throws org.apache.thrift.TException {
        upVertice_result result = new upVertice_result();
        result.success = iface.upVertice(args.nomeUp, args.V);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class upAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upAresta_args> {
      public upAresta() {
        super("upAresta");
      }

      public upAresta_args getEmptyArgsInstance() {
        return new upAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public upAresta_result getResult(I iface, upAresta_args args) throws org.apache.thrift.TException {
        upAresta_result result = new upAresta_result();
        result.success = iface.upAresta(args.nomeV1, args.nomeV2, args.A);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVertice_args> {
      public getVertice() {
        super("getVertice");
      }

      public getVertice_args getEmptyArgsInstance() {
        return new getVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVertice_result getResult(I iface, getVertice_args args) throws org.apache.thrift.TException {
        getVertice_result result = new getVertice_result();
        result.success = iface.getVertice(args.nome);
        return result;
      }
    }

    public static class getAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAresta_args> {
      public getAresta() {
        super("getAresta");
      }

      public getAresta_args getEmptyArgsInstance() {
        return new getAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAresta_result getResult(I iface, getAresta_args args) throws org.apache.thrift.TException {
        getAresta_result result = new getAresta_result();
        result.success = iface.getAresta(args.v1, args.v2, args.flag);
        return result;
      }
    }

    public static class exibeGrafo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exibeGrafo_args> {
      public exibeGrafo() {
        super("exibeGrafo");
      }

      public exibeGrafo_args getEmptyArgsInstance() {
        return new exibeGrafo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exibeGrafo_result getResult(I iface, exibeGrafo_args args) throws org.apache.thrift.TException {
        exibeGrafo_result result = new exibeGrafo_result();
        result.success = iface.exibeGrafo();
        return result;
      }
    }

    public static class exibeVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exibeVertice_args> {
      public exibeVertice() {
        super("exibeVertice");
      }

      public exibeVertice_args getEmptyArgsInstance() {
        return new exibeVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exibeVertice_result getResult(I iface, exibeVertice_args args) throws org.apache.thrift.TException {
        exibeVertice_result result = new exibeVertice_result();
        result.success = iface.exibeVertice(args.flag);
        return result;
      }
    }

    public static class exibeAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exibeAresta_args> {
      public exibeAresta() {
        super("exibeAresta");
      }

      public exibeAresta_args getEmptyArgsInstance() {
        return new exibeAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exibeAresta_result getResult(I iface, exibeAresta_args args) throws org.apache.thrift.TException {
        exibeAresta_result result = new exibeAresta_result();
        result.success = iface.exibeAresta(args.flag);
        return result;
      }
    }

    public static class listarArestasVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarArestasVertice_args> {
      public listarArestasVertice() {
        super("listarArestasVertice");
      }

      public listarArestasVertice_args getEmptyArgsInstance() {
        return new listarArestasVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarArestasVertice_result getResult(I iface, listarArestasVertice_args args) throws org.apache.thrift.TException {
        listarArestasVertice_result result = new listarArestasVertice_result();
        result.success = iface.listarArestasVertice(args.nomeV, args.flag);
        return result;
      }
    }

    public static class listarVizinhosVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarVizinhosVertice_args> {
      public listarVizinhosVertice() {
        super("listarVizinhosVertice");
      }

      public listarVizinhosVertice_args getEmptyArgsInstance() {
        return new listarVizinhosVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarVizinhosVertice_result getResult(I iface, listarVizinhosVertice_args args) throws org.apache.thrift.TException {
        listarVizinhosVertice_result result = new listarVizinhosVertice_result();
        result.success = iface.listarVizinhosVertice(args.nomeV);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("carregaGrafo", new carregaGrafo());
      processMap.put("salvaGrafo", new salvaGrafo());
      processMap.put("addVertice", new addVertice());
      processMap.put("addAresta", new addAresta());
      processMap.put("delVertice", new delVertice());
      processMap.put("delAresta", new delAresta());
      processMap.put("upVertice", new upVertice());
      processMap.put("upAresta", new upAresta());
      processMap.put("getVertice", new getVertice());
      processMap.put("getAresta", new getAresta());
      processMap.put("exibeGrafo", new exibeGrafo());
      processMap.put("exibeVertice", new exibeVertice());
      processMap.put("exibeAresta", new exibeAresta());
      processMap.put("listarArestasVertice", new listarArestasVertice());
      processMap.put("listarVizinhosVertice", new listarVizinhosVertice());
      return processMap;
    }

    public static class carregaGrafo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, carregaGrafo_args, Void> {
      public carregaGrafo() {
        super("carregaGrafo");
      }

      public carregaGrafo_args getEmptyArgsInstance() {
        return new carregaGrafo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            carregaGrafo_result result = new carregaGrafo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            carregaGrafo_result result = new carregaGrafo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, carregaGrafo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.carregaGrafo(args.caminho,resultHandler);
      }
    }

    public static class salvaGrafo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, salvaGrafo_args, Void> {
      public salvaGrafo() {
        super("salvaGrafo");
      }

      public salvaGrafo_args getEmptyArgsInstance() {
        return new salvaGrafo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            salvaGrafo_result result = new salvaGrafo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            salvaGrafo_result result = new salvaGrafo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, salvaGrafo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.salvaGrafo(args.caminho,resultHandler);
      }
    }

    public static class addVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVertice_args, Boolean> {
      public addVertice() {
        super("addVertice");
      }

      public addVertice_args getEmptyArgsInstance() {
        return new addVertice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addVertice_result result = new addVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addVertice_result result = new addVertice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addVertice(args.nome, args.cor, args.descricao, args.peso,resultHandler);
      }
    }

    public static class addAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAresta_args, Boolean> {
      public addAresta() {
        super("addAresta");
      }

      public addAresta_args getEmptyArgsInstance() {
        return new addAresta_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addAresta_result result = new addAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addAresta_result result = new addAresta_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addAresta(args.v1, args.v2, args.peso, args.direcao, args.descricao,resultHandler);
      }
    }

    public static class delVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delVertice_args, Boolean> {
      public delVertice() {
        super("delVertice");
      }

      public delVertice_args getEmptyArgsInstance() {
        return new delVertice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delVertice_result result = new delVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delVertice_result result = new delVertice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delVertice(args.nome,resultHandler);
      }
    }

    public static class delAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delAresta_args, Boolean> {
      public delAresta() {
        super("delAresta");
      }

      public delAresta_args getEmptyArgsInstance() {
        return new delAresta_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delAresta_result result = new delAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delAresta_result result = new delAresta_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delAresta(args.v1, args.v2,resultHandler);
      }
    }

    public static class upVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upVertice_args, Boolean> {
      public upVertice() {
        super("upVertice");
      }

      public upVertice_args getEmptyArgsInstance() {
        return new upVertice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            upVertice_result result = new upVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            upVertice_result result = new upVertice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, upVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.upVertice(args.nomeUp, args.V,resultHandler);
      }
    }

    public static class upAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upAresta_args, Boolean> {
      public upAresta() {
        super("upAresta");
      }

      public upAresta_args getEmptyArgsInstance() {
        return new upAresta_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            upAresta_result result = new upAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            upAresta_result result = new upAresta_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, upAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.upAresta(args.nomeV1, args.nomeV2, args.A,resultHandler);
      }
    }

    public static class getVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVertice_args, Vertice> {
      public getVertice() {
        super("getVertice");
      }

      public getVertice_args getEmptyArgsInstance() {
        return new getVertice_args();
      }

      public AsyncMethodCallback<Vertice> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Vertice>() { 
          public void onComplete(Vertice o) {
            getVertice_result result = new getVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVertice_result result = new getVertice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Vertice> resultHandler) throws TException {
        iface.getVertice(args.nome,resultHandler);
      }
    }

    public static class getAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAresta_args, Aresta> {
      public getAresta() {
        super("getAresta");
      }

      public getAresta_args getEmptyArgsInstance() {
        return new getAresta_args();
      }

      public AsyncMethodCallback<Aresta> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Aresta>() { 
          public void onComplete(Aresta o) {
            getAresta_result result = new getAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAresta_result result = new getAresta_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Aresta> resultHandler) throws TException {
        iface.getAresta(args.v1, args.v2, args.flag,resultHandler);
      }
    }

    public static class exibeGrafo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exibeGrafo_args, String> {
      public exibeGrafo() {
        super("exibeGrafo");
      }

      public exibeGrafo_args getEmptyArgsInstance() {
        return new exibeGrafo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            exibeGrafo_result result = new exibeGrafo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exibeGrafo_result result = new exibeGrafo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exibeGrafo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.exibeGrafo(resultHandler);
      }
    }

    public static class exibeVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exibeVertice_args, String> {
      public exibeVertice() {
        super("exibeVertice");
      }

      public exibeVertice_args getEmptyArgsInstance() {
        return new exibeVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            exibeVertice_result result = new exibeVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exibeVertice_result result = new exibeVertice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exibeVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.exibeVertice(args.flag,resultHandler);
      }
    }

    public static class exibeAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exibeAresta_args, String> {
      public exibeAresta() {
        super("exibeAresta");
      }

      public exibeAresta_args getEmptyArgsInstance() {
        return new exibeAresta_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            exibeAresta_result result = new exibeAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exibeAresta_result result = new exibeAresta_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exibeAresta_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.exibeAresta(args.flag,resultHandler);
      }
    }

    public static class listarArestasVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarArestasVertice_args, String> {
      public listarArestasVertice() {
        super("listarArestasVertice");
      }

      public listarArestasVertice_args getEmptyArgsInstance() {
        return new listarArestasVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listarArestasVertice_result result = new listarArestasVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listarArestasVertice_result result = new listarArestasVertice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarArestasVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listarArestasVertice(args.nomeV, args.flag,resultHandler);
      }
    }

    public static class listarVizinhosVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarVizinhosVertice_args, String> {
      public listarVizinhosVertice() {
        super("listarVizinhosVertice");
      }

      public listarVizinhosVertice_args getEmptyArgsInstance() {
        return new listarVizinhosVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listarVizinhosVertice_result result = new listarVizinhosVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listarVizinhosVertice_result result = new listarVizinhosVertice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarVizinhosVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listarVizinhosVertice(args.nomeV,resultHandler);
      }
    }

  }

  public static class carregaGrafo_args implements org.apache.thrift.TBase<carregaGrafo_args, carregaGrafo_args._Fields>, java.io.Serializable, Cloneable, Comparable<carregaGrafo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("carregaGrafo_args");

    private static final org.apache.thrift.protocol.TField CAMINHO_FIELD_DESC = new org.apache.thrift.protocol.TField("caminho", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new carregaGrafo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new carregaGrafo_argsTupleSchemeFactory());
    }

    public String caminho; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAMINHO((short)1, "caminho");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAMINHO
            return CAMINHO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAMINHO, new org.apache.thrift.meta_data.FieldMetaData("caminho", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(carregaGrafo_args.class, metaDataMap);
    }

    public carregaGrafo_args() {
    }

    public carregaGrafo_args(
      String caminho)
    {
      this();
      this.caminho = caminho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public carregaGrafo_args(carregaGrafo_args other) {
      if (other.isSetCaminho()) {
        this.caminho = other.caminho;
      }
    }

    public carregaGrafo_args deepCopy() {
      return new carregaGrafo_args(this);
    }

    @Override
    public void clear() {
      this.caminho = null;
    }

    public String getCaminho() {
      return this.caminho;
    }

    public carregaGrafo_args setCaminho(String caminho) {
      this.caminho = caminho;
      return this;
    }

    public void unsetCaminho() {
      this.caminho = null;
    }

    /** Returns true if field caminho is set (has been assigned a value) and false otherwise */
    public boolean isSetCaminho() {
      return this.caminho != null;
    }

    public void setCaminhoIsSet(boolean value) {
      if (!value) {
        this.caminho = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAMINHO:
        if (value == null) {
          unsetCaminho();
        } else {
          setCaminho((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAMINHO:
        return getCaminho();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAMINHO:
        return isSetCaminho();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof carregaGrafo_args)
        return this.equals((carregaGrafo_args)that);
      return false;
    }

    public boolean equals(carregaGrafo_args that) {
      if (that == null)
        return false;

      boolean this_present_caminho = true && this.isSetCaminho();
      boolean that_present_caminho = true && that.isSetCaminho();
      if (this_present_caminho || that_present_caminho) {
        if (!(this_present_caminho && that_present_caminho))
          return false;
        if (!this.caminho.equals(that.caminho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(carregaGrafo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaminho()).compareTo(other.isSetCaminho());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaminho()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caminho, other.caminho);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("carregaGrafo_args(");
      boolean first = true;

      sb.append("caminho:");
      if (this.caminho == null) {
        sb.append("null");
      } else {
        sb.append(this.caminho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class carregaGrafo_argsStandardSchemeFactory implements SchemeFactory {
      public carregaGrafo_argsStandardScheme getScheme() {
        return new carregaGrafo_argsStandardScheme();
      }
    }

    private static class carregaGrafo_argsStandardScheme extends StandardScheme<carregaGrafo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, carregaGrafo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAMINHO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caminho = iprot.readString();
                struct.setCaminhoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, carregaGrafo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caminho != null) {
          oprot.writeFieldBegin(CAMINHO_FIELD_DESC);
          oprot.writeString(struct.caminho);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class carregaGrafo_argsTupleSchemeFactory implements SchemeFactory {
      public carregaGrafo_argsTupleScheme getScheme() {
        return new carregaGrafo_argsTupleScheme();
      }
    }

    private static class carregaGrafo_argsTupleScheme extends TupleScheme<carregaGrafo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, carregaGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaminho()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCaminho()) {
          oprot.writeString(struct.caminho);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, carregaGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.caminho = iprot.readString();
          struct.setCaminhoIsSet(true);
        }
      }
    }

  }

  public static class carregaGrafo_result implements org.apache.thrift.TBase<carregaGrafo_result, carregaGrafo_result._Fields>, java.io.Serializable, Cloneable, Comparable<carregaGrafo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("carregaGrafo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new carregaGrafo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new carregaGrafo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(carregaGrafo_result.class, metaDataMap);
    }

    public carregaGrafo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public carregaGrafo_result(carregaGrafo_result other) {
    }

    public carregaGrafo_result deepCopy() {
      return new carregaGrafo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof carregaGrafo_result)
        return this.equals((carregaGrafo_result)that);
      return false;
    }

    public boolean equals(carregaGrafo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(carregaGrafo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("carregaGrafo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class carregaGrafo_resultStandardSchemeFactory implements SchemeFactory {
      public carregaGrafo_resultStandardScheme getScheme() {
        return new carregaGrafo_resultStandardScheme();
      }
    }

    private static class carregaGrafo_resultStandardScheme extends StandardScheme<carregaGrafo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, carregaGrafo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, carregaGrafo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class carregaGrafo_resultTupleSchemeFactory implements SchemeFactory {
      public carregaGrafo_resultTupleScheme getScheme() {
        return new carregaGrafo_resultTupleScheme();
      }
    }

    private static class carregaGrafo_resultTupleScheme extends TupleScheme<carregaGrafo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, carregaGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, carregaGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class salvaGrafo_args implements org.apache.thrift.TBase<salvaGrafo_args, salvaGrafo_args._Fields>, java.io.Serializable, Cloneable, Comparable<salvaGrafo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("salvaGrafo_args");

    private static final org.apache.thrift.protocol.TField CAMINHO_FIELD_DESC = new org.apache.thrift.protocol.TField("caminho", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new salvaGrafo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new salvaGrafo_argsTupleSchemeFactory());
    }

    public String caminho; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAMINHO((short)1, "caminho");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAMINHO
            return CAMINHO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAMINHO, new org.apache.thrift.meta_data.FieldMetaData("caminho", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(salvaGrafo_args.class, metaDataMap);
    }

    public salvaGrafo_args() {
    }

    public salvaGrafo_args(
      String caminho)
    {
      this();
      this.caminho = caminho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public salvaGrafo_args(salvaGrafo_args other) {
      if (other.isSetCaminho()) {
        this.caminho = other.caminho;
      }
    }

    public salvaGrafo_args deepCopy() {
      return new salvaGrafo_args(this);
    }

    @Override
    public void clear() {
      this.caminho = null;
    }

    public String getCaminho() {
      return this.caminho;
    }

    public salvaGrafo_args setCaminho(String caminho) {
      this.caminho = caminho;
      return this;
    }

    public void unsetCaminho() {
      this.caminho = null;
    }

    /** Returns true if field caminho is set (has been assigned a value) and false otherwise */
    public boolean isSetCaminho() {
      return this.caminho != null;
    }

    public void setCaminhoIsSet(boolean value) {
      if (!value) {
        this.caminho = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAMINHO:
        if (value == null) {
          unsetCaminho();
        } else {
          setCaminho((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAMINHO:
        return getCaminho();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAMINHO:
        return isSetCaminho();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof salvaGrafo_args)
        return this.equals((salvaGrafo_args)that);
      return false;
    }

    public boolean equals(salvaGrafo_args that) {
      if (that == null)
        return false;

      boolean this_present_caminho = true && this.isSetCaminho();
      boolean that_present_caminho = true && that.isSetCaminho();
      if (this_present_caminho || that_present_caminho) {
        if (!(this_present_caminho && that_present_caminho))
          return false;
        if (!this.caminho.equals(that.caminho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(salvaGrafo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaminho()).compareTo(other.isSetCaminho());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaminho()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caminho, other.caminho);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("salvaGrafo_args(");
      boolean first = true;

      sb.append("caminho:");
      if (this.caminho == null) {
        sb.append("null");
      } else {
        sb.append(this.caminho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class salvaGrafo_argsStandardSchemeFactory implements SchemeFactory {
      public salvaGrafo_argsStandardScheme getScheme() {
        return new salvaGrafo_argsStandardScheme();
      }
    }

    private static class salvaGrafo_argsStandardScheme extends StandardScheme<salvaGrafo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, salvaGrafo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAMINHO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caminho = iprot.readString();
                struct.setCaminhoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, salvaGrafo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caminho != null) {
          oprot.writeFieldBegin(CAMINHO_FIELD_DESC);
          oprot.writeString(struct.caminho);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class salvaGrafo_argsTupleSchemeFactory implements SchemeFactory {
      public salvaGrafo_argsTupleScheme getScheme() {
        return new salvaGrafo_argsTupleScheme();
      }
    }

    private static class salvaGrafo_argsTupleScheme extends TupleScheme<salvaGrafo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, salvaGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaminho()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCaminho()) {
          oprot.writeString(struct.caminho);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, salvaGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.caminho = iprot.readString();
          struct.setCaminhoIsSet(true);
        }
      }
    }

  }

  public static class salvaGrafo_result implements org.apache.thrift.TBase<salvaGrafo_result, salvaGrafo_result._Fields>, java.io.Serializable, Cloneable, Comparable<salvaGrafo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("salvaGrafo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new salvaGrafo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new salvaGrafo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(salvaGrafo_result.class, metaDataMap);
    }

    public salvaGrafo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public salvaGrafo_result(salvaGrafo_result other) {
    }

    public salvaGrafo_result deepCopy() {
      return new salvaGrafo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof salvaGrafo_result)
        return this.equals((salvaGrafo_result)that);
      return false;
    }

    public boolean equals(salvaGrafo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(salvaGrafo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("salvaGrafo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class salvaGrafo_resultStandardSchemeFactory implements SchemeFactory {
      public salvaGrafo_resultStandardScheme getScheme() {
        return new salvaGrafo_resultStandardScheme();
      }
    }

    private static class salvaGrafo_resultStandardScheme extends StandardScheme<salvaGrafo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, salvaGrafo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, salvaGrafo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class salvaGrafo_resultTupleSchemeFactory implements SchemeFactory {
      public salvaGrafo_resultTupleScheme getScheme() {
        return new salvaGrafo_resultTupleScheme();
      }
    }

    private static class salvaGrafo_resultTupleScheme extends TupleScheme<salvaGrafo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, salvaGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, salvaGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addVertice_args implements org.apache.thrift.TBase<addVertice_args, addVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COR_FIELD_DESC = new org.apache.thrift.protocol.TField("cor", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVertice_argsTupleSchemeFactory());
    }

    public int nome; // required
    public int cor; // required
    public String descricao; // required
    public double peso; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome"),
      COR((short)2, "cor"),
      DESCRICAO((short)3, "descricao"),
      PESO((short)4, "peso");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          case 2: // COR
            return COR;
          case 3: // DESCRICAO
            return DESCRICAO;
          case 4: // PESO
            return PESO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private static final int __COR_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COR, new org.apache.thrift.meta_data.FieldMetaData("cor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVertice_args.class, metaDataMap);
    }

    public addVertice_args() {
    }

    public addVertice_args(
      int nome,
      int cor,
      String descricao,
      double peso)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
      this.cor = cor;
      setCorIsSet(true);
      this.descricao = descricao;
      this.peso = peso;
      setPesoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVertice_args(addVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
      this.cor = other.cor;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
      this.peso = other.peso;
    }

    public addVertice_args deepCopy() {
      return new addVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
      setCorIsSet(false);
      this.cor = 0;
      this.descricao = null;
      setPesoIsSet(false);
      this.peso = 0.0;
    }

    public int getNome() {
      return this.nome;
    }

    public addVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public int getCor() {
      return this.cor;
    }

    public addVertice_args setCor(int cor) {
      this.cor = cor;
      setCorIsSet(true);
      return this;
    }

    public void unsetCor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COR_ISSET_ID);
    }

    /** Returns true if field cor is set (has been assigned a value) and false otherwise */
    public boolean isSetCor() {
      return EncodingUtils.testBit(__isset_bitfield, __COR_ISSET_ID);
    }

    public void setCorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COR_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public addVertice_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public double getPeso() {
      return this.peso;
    }

    public addVertice_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Integer)value);
        }
        break;

      case COR:
        if (value == null) {
          unsetCor();
        } else {
          setCor((Integer)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Integer.valueOf(getNome());

      case COR:
        return Integer.valueOf(getCor());

      case DESCRICAO:
        return getDescricao();

      case PESO:
        return Double.valueOf(getPeso());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      case COR:
        return isSetCor();
      case DESCRICAO:
        return isSetDescricao();
      case PESO:
        return isSetPeso();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVertice_args)
        return this.equals((addVertice_args)that);
      return false;
    }

    public boolean equals(addVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      boolean this_present_cor = true;
      boolean that_present_cor = true;
      if (this_present_cor || that_present_cor) {
        if (!(this_present_cor && that_present_cor))
          return false;
        if (this.cor != that.cor)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCor()).compareTo(other.isSetCor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cor, other.cor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cor:");
      sb.append(this.cor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVertice_argsStandardSchemeFactory implements SchemeFactory {
      public addVertice_argsStandardScheme getScheme() {
        return new addVertice_argsStandardScheme();
      }
    }

    private static class addVertice_argsStandardScheme extends StandardScheme<addVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cor = iprot.readI32();
                struct.setCorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COR_FIELD_DESC);
        oprot.writeI32(struct.cor);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVertice_argsTupleSchemeFactory implements SchemeFactory {
      public addVertice_argsTupleScheme getScheme() {
        return new addVertice_argsTupleScheme();
      }
    }

    private static class addVertice_argsTupleScheme extends TupleScheme<addVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        if (struct.isSetCor()) {
          optionals.set(1);
        }
        if (struct.isSetDescricao()) {
          optionals.set(2);
        }
        if (struct.isSetPeso()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
        if (struct.isSetCor()) {
          oprot.writeI32(struct.cor);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cor = iprot.readI32();
          struct.setCorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
      }
    }

  }

  public static class addVertice_result implements org.apache.thrift.TBase<addVertice_result, addVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVertice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVertice_result.class, metaDataMap);
    }

    public addVertice_result() {
    }

    public addVertice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVertice_result(addVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addVertice_result deepCopy() {
      return new addVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVertice_result)
        return this.equals((addVertice_result)that);
      return false;
    }

    public boolean equals(addVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVertice_resultStandardSchemeFactory implements SchemeFactory {
      public addVertice_resultStandardScheme getScheme() {
        return new addVertice_resultStandardScheme();
      }
    }

    private static class addVertice_resultStandardScheme extends StandardScheme<addVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVertice_resultTupleSchemeFactory implements SchemeFactory {
      public addVertice_resultTupleScheme getScheme() {
        return new addVertice_resultTupleScheme();
      }
    }

    private static class addVertice_resultTupleScheme extends TupleScheme<addVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addAresta_args implements org.apache.thrift.TBase<addAresta_args, addAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAresta_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField DIRECAO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcao", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAresta_argsTupleSchemeFactory());
    }

    public int v1; // required
    public int v2; // required
    public double peso; // required
    public boolean direcao; // required
    public String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2"),
      PESO((short)3, "peso"),
      DIRECAO((short)4, "direcao"),
      DESCRICAO((short)5, "descricao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          case 3: // PESO
            return PESO;
          case 4: // DIRECAO
            return DIRECAO;
          case 5: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __V1_ISSET_ID = 0;
    private static final int __V2_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private static final int __DIRECAO_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DIRECAO, new org.apache.thrift.meta_data.FieldMetaData("direcao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAresta_args.class, metaDataMap);
    }

    public addAresta_args() {
    }

    public addAresta_args(
      int v1,
      int v2,
      double peso,
      boolean direcao,
      String descricao)
    {
      this();
      this.v1 = v1;
      setV1IsSet(true);
      this.v2 = v2;
      setV2IsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.direcao = direcao;
      setDirecaoIsSet(true);
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAresta_args(addAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.v1 = other.v1;
      this.v2 = other.v2;
      this.peso = other.peso;
      this.direcao = other.direcao;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public addAresta_args deepCopy() {
      return new addAresta_args(this);
    }

    @Override
    public void clear() {
      setV1IsSet(false);
      this.v1 = 0;
      setV2IsSet(false);
      this.v2 = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      setDirecaoIsSet(false);
      this.direcao = false;
      this.descricao = null;
    }

    public int getV1() {
      return this.v1;
    }

    public addAresta_args setV1(int v1) {
      this.v1 = v1;
      setV1IsSet(true);
      return this;
    }

    public void unsetV1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V1_ISSET_ID);
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return EncodingUtils.testBit(__isset_bitfield, __V1_ISSET_ID);
    }

    public void setV1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V1_ISSET_ID, value);
    }

    public int getV2() {
      return this.v2;
    }

    public addAresta_args setV2(int v2) {
      this.v2 = v2;
      setV2IsSet(true);
      return this;
    }

    public void unsetV2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V2_ISSET_ID);
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return EncodingUtils.testBit(__isset_bitfield, __V2_ISSET_ID);
    }

    public void setV2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V2_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public addAresta_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public boolean isDirecao() {
      return this.direcao;
    }

    public addAresta_args setDirecao(boolean direcao) {
      this.direcao = direcao;
      setDirecaoIsSet(true);
      return this;
    }

    public void unsetDirecao() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECAO_ISSET_ID);
    }

    /** Returns true if field direcao is set (has been assigned a value) and false otherwise */
    public boolean isSetDirecao() {
      return EncodingUtils.testBit(__isset_bitfield, __DIRECAO_ISSET_ID);
    }

    public void setDirecaoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECAO_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public addAresta_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((Integer)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((Integer)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      case DIRECAO:
        if (value == null) {
          unsetDirecao();
        } else {
          setDirecao((Boolean)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return Integer.valueOf(getV1());

      case V2:
        return Integer.valueOf(getV2());

      case PESO:
        return Double.valueOf(getPeso());

      case DIRECAO:
        return Boolean.valueOf(isDirecao());

      case DESCRICAO:
        return getDescricao();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      case PESO:
        return isSetPeso();
      case DIRECAO:
        return isSetDirecao();
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAresta_args)
        return this.equals((addAresta_args)that);
      return false;
    }

    public boolean equals(addAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true;
      boolean that_present_v1 = true;
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (this.v1 != that.v1)
          return false;
      }

      boolean this_present_v2 = true;
      boolean that_present_v2 = true;
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (this.v2 != that.v2)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_direcao = true;
      boolean that_present_direcao = true;
      if (this_present_direcao || that_present_direcao) {
        if (!(this_present_direcao && that_present_direcao))
          return false;
        if (this.direcao != that.direcao)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirecao()).compareTo(other.isSetDirecao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirecao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcao, other.direcao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAresta_args(");
      boolean first = true;

      sb.append("v1:");
      sb.append(this.v1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      sb.append(this.v2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direcao:");
      sb.append(this.direcao);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAresta_argsStandardSchemeFactory implements SchemeFactory {
      public addAresta_argsStandardScheme getScheme() {
        return new addAresta_argsStandardScheme();
      }
    }

    private static class addAresta_argsStandardScheme extends StandardScheme<addAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.v1 = iprot.readI32();
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.v2 = iprot.readI32();
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DIRECAO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.direcao = iprot.readBool();
                struct.setDirecaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(V1_FIELD_DESC);
        oprot.writeI32(struct.v1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V2_FIELD_DESC);
        oprot.writeI32(struct.v2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRECAO_FIELD_DESC);
        oprot.writeBool(struct.direcao);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAresta_argsTupleSchemeFactory implements SchemeFactory {
      public addAresta_argsTupleScheme getScheme() {
        return new addAresta_argsTupleScheme();
      }
    }

    private static class addAresta_argsTupleScheme extends TupleScheme<addAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        if (struct.isSetPeso()) {
          optionals.set(2);
        }
        if (struct.isSetDirecao()) {
          optionals.set(3);
        }
        if (struct.isSetDescricao()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetV1()) {
          oprot.writeI32(struct.v1);
        }
        if (struct.isSetV2()) {
          oprot.writeI32(struct.v2);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDirecao()) {
          oprot.writeBool(struct.direcao);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.v1 = iprot.readI32();
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.v2 = iprot.readI32();
          struct.setV2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.direcao = iprot.readBool();
          struct.setDirecaoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

  }

  public static class addAresta_result implements org.apache.thrift.TBase<addAresta_result, addAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAresta_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAresta_result.class, metaDataMap);
    }

    public addAresta_result() {
    }

    public addAresta_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAresta_result(addAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addAresta_result deepCopy() {
      return new addAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAresta_result)
        return this.equals((addAresta_result)that);
      return false;
    }

    public boolean equals(addAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAresta_resultStandardSchemeFactory implements SchemeFactory {
      public addAresta_resultStandardScheme getScheme() {
        return new addAresta_resultStandardScheme();
      }
    }

    private static class addAresta_resultStandardScheme extends StandardScheme<addAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAresta_resultTupleSchemeFactory implements SchemeFactory {
      public addAresta_resultTupleScheme getScheme() {
        return new addAresta_resultTupleScheme();
      }
    }

    private static class addAresta_resultTupleScheme extends TupleScheme<addAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delVertice_args implements org.apache.thrift.TBase<delVertice_args, delVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<delVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delVertice_argsTupleSchemeFactory());
    }

    public int nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delVertice_args.class, metaDataMap);
    }

    public delVertice_args() {
    }

    public delVertice_args(
      int nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delVertice_args(delVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public delVertice_args deepCopy() {
      return new delVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public int getNome() {
      return this.nome;
    }

    public delVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Integer.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delVertice_args)
        return this.equals((delVertice_args)that);
      return false;
    }

    public boolean equals(delVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delVertice_argsStandardSchemeFactory implements SchemeFactory {
      public delVertice_argsStandardScheme getScheme() {
        return new delVertice_argsStandardScheme();
      }
    }

    private static class delVertice_argsStandardScheme extends StandardScheme<delVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delVertice_argsTupleSchemeFactory implements SchemeFactory {
      public delVertice_argsTupleScheme getScheme() {
        return new delVertice_argsTupleScheme();
      }
    }

    private static class delVertice_argsTupleScheme extends TupleScheme<delVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class delVertice_result implements org.apache.thrift.TBase<delVertice_result, delVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<delVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delVertice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delVertice_result.class, metaDataMap);
    }

    public delVertice_result() {
    }

    public delVertice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delVertice_result(delVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delVertice_result deepCopy() {
      return new delVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delVertice_result)
        return this.equals((delVertice_result)that);
      return false;
    }

    public boolean equals(delVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delVertice_resultStandardSchemeFactory implements SchemeFactory {
      public delVertice_resultStandardScheme getScheme() {
        return new delVertice_resultStandardScheme();
      }
    }

    private static class delVertice_resultStandardScheme extends StandardScheme<delVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delVertice_resultTupleSchemeFactory implements SchemeFactory {
      public delVertice_resultTupleScheme getScheme() {
        return new delVertice_resultTupleScheme();
      }
    }

    private static class delVertice_resultTupleScheme extends TupleScheme<delVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delAresta_args implements org.apache.thrift.TBase<delAresta_args, delAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<delAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAresta_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAresta_argsTupleSchemeFactory());
    }

    public int v1; // required
    public int v2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __V1_ISSET_ID = 0;
    private static final int __V2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAresta_args.class, metaDataMap);
    }

    public delAresta_args() {
    }

    public delAresta_args(
      int v1,
      int v2)
    {
      this();
      this.v1 = v1;
      setV1IsSet(true);
      this.v2 = v2;
      setV2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAresta_args(delAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.v1 = other.v1;
      this.v2 = other.v2;
    }

    public delAresta_args deepCopy() {
      return new delAresta_args(this);
    }

    @Override
    public void clear() {
      setV1IsSet(false);
      this.v1 = 0;
      setV2IsSet(false);
      this.v2 = 0;
    }

    public int getV1() {
      return this.v1;
    }

    public delAresta_args setV1(int v1) {
      this.v1 = v1;
      setV1IsSet(true);
      return this;
    }

    public void unsetV1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V1_ISSET_ID);
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return EncodingUtils.testBit(__isset_bitfield, __V1_ISSET_ID);
    }

    public void setV1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V1_ISSET_ID, value);
    }

    public int getV2() {
      return this.v2;
    }

    public delAresta_args setV2(int v2) {
      this.v2 = v2;
      setV2IsSet(true);
      return this;
    }

    public void unsetV2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V2_ISSET_ID);
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return EncodingUtils.testBit(__isset_bitfield, __V2_ISSET_ID);
    }

    public void setV2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((Integer)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return Integer.valueOf(getV1());

      case V2:
        return Integer.valueOf(getV2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAresta_args)
        return this.equals((delAresta_args)that);
      return false;
    }

    public boolean equals(delAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true;
      boolean that_present_v1 = true;
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (this.v1 != that.v1)
          return false;
      }

      boolean this_present_v2 = true;
      boolean that_present_v2 = true;
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (this.v2 != that.v2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAresta_args(");
      boolean first = true;

      sb.append("v1:");
      sb.append(this.v1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      sb.append(this.v2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAresta_argsStandardSchemeFactory implements SchemeFactory {
      public delAresta_argsStandardScheme getScheme() {
        return new delAresta_argsStandardScheme();
      }
    }

    private static class delAresta_argsStandardScheme extends StandardScheme<delAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.v1 = iprot.readI32();
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.v2 = iprot.readI32();
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(V1_FIELD_DESC);
        oprot.writeI32(struct.v1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V2_FIELD_DESC);
        oprot.writeI32(struct.v2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAresta_argsTupleSchemeFactory implements SchemeFactory {
      public delAresta_argsTupleScheme getScheme() {
        return new delAresta_argsTupleScheme();
      }
    }

    private static class delAresta_argsTupleScheme extends TupleScheme<delAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetV1()) {
          oprot.writeI32(struct.v1);
        }
        if (struct.isSetV2()) {
          oprot.writeI32(struct.v2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.v1 = iprot.readI32();
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.v2 = iprot.readI32();
          struct.setV2IsSet(true);
        }
      }
    }

  }

  public static class delAresta_result implements org.apache.thrift.TBase<delAresta_result, delAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<delAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAresta_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAresta_result.class, metaDataMap);
    }

    public delAresta_result() {
    }

    public delAresta_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAresta_result(delAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delAresta_result deepCopy() {
      return new delAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAresta_result)
        return this.equals((delAresta_result)that);
      return false;
    }

    public boolean equals(delAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAresta_resultStandardSchemeFactory implements SchemeFactory {
      public delAresta_resultStandardScheme getScheme() {
        return new delAresta_resultStandardScheme();
      }
    }

    private static class delAresta_resultStandardScheme extends StandardScheme<delAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAresta_resultTupleSchemeFactory implements SchemeFactory {
      public delAresta_resultTupleScheme getScheme() {
        return new delAresta_resultTupleScheme();
      }
    }

    private static class delAresta_resultTupleScheme extends TupleScheme<delAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class upVertice_args implements org.apache.thrift.TBase<upVertice_args, upVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<upVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeUp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("V", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upVertice_argsTupleSchemeFactory());
    }

    public int nomeUp; // required
    public Vertice V; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_UP((short)1, "nomeUp"),
      V((short)2, "V");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_UP
            return NOME_UP;
          case 2: // V
            return V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEUP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_UP, new org.apache.thrift.meta_data.FieldMetaData("nomeUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("V", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upVertice_args.class, metaDataMap);
    }

    public upVertice_args() {
    }

    public upVertice_args(
      int nomeUp,
      Vertice V)
    {
      this();
      this.nomeUp = nomeUp;
      setNomeUpIsSet(true);
      this.V = V;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upVertice_args(upVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeUp = other.nomeUp;
      if (other.isSetV()) {
        this.V = new Vertice(other.V);
      }
    }

    public upVertice_args deepCopy() {
      return new upVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeUpIsSet(false);
      this.nomeUp = 0;
      this.V = null;
    }

    public int getNomeUp() {
      return this.nomeUp;
    }

    public upVertice_args setNomeUp(int nomeUp) {
      this.nomeUp = nomeUp;
      setNomeUpIsSet(true);
      return this;
    }

    public void unsetNomeUp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOMEUP_ISSET_ID);
    }

    /** Returns true if field nomeUp is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeUp() {
      return EncodingUtils.testBit(__isset_bitfield, __NOMEUP_ISSET_ID);
    }

    public void setNomeUpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOMEUP_ISSET_ID, value);
    }

    public Vertice getV() {
      return this.V;
    }

    public upVertice_args setV(Vertice V) {
      this.V = V;
      return this;
    }

    public void unsetV() {
      this.V = null;
    }

    /** Returns true if field V is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
      return this.V != null;
    }

    public void setVIsSet(boolean value) {
      if (!value) {
        this.V = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME_UP:
        if (value == null) {
          unsetNomeUp();
        } else {
          setNomeUp((Integer)value);
        }
        break;

      case V:
        if (value == null) {
          unsetV();
        } else {
          setV((Vertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_UP:
        return Integer.valueOf(getNomeUp());

      case V:
        return getV();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME_UP:
        return isSetNomeUp();
      case V:
        return isSetV();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upVertice_args)
        return this.equals((upVertice_args)that);
      return false;
    }

    public boolean equals(upVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nomeUp = true;
      boolean that_present_nomeUp = true;
      if (this_present_nomeUp || that_present_nomeUp) {
        if (!(this_present_nomeUp && that_present_nomeUp))
          return false;
        if (this.nomeUp != that.nomeUp)
          return false;
      }

      boolean this_present_V = true && this.isSetV();
      boolean that_present_V = true && that.isSetV();
      if (this_present_V || that_present_V) {
        if (!(this_present_V && that_present_V))
          return false;
        if (!this.V.equals(that.V))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(upVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNomeUp()).compareTo(other.isSetNomeUp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeUp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeUp, other.nomeUp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV()).compareTo(other.isSetV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.V, other.V);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upVertice_args(");
      boolean first = true;

      sb.append("nomeUp:");
      sb.append(this.nomeUp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("V:");
      if (this.V == null) {
        sb.append("null");
      } else {
        sb.append(this.V);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (V != null) {
        V.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upVertice_argsStandardSchemeFactory implements SchemeFactory {
      public upVertice_argsStandardScheme getScheme() {
        return new upVertice_argsStandardScheme();
      }
    }

    private static class upVertice_argsStandardScheme extends StandardScheme<upVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_UP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeUp = iprot.readI32();
                struct.setNomeUpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.V = new Vertice();
                struct.V.read(iprot);
                struct.setVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_UP_FIELD_DESC);
        oprot.writeI32(struct.nomeUp);
        oprot.writeFieldEnd();
        if (struct.V != null) {
          oprot.writeFieldBegin(V_FIELD_DESC);
          struct.V.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upVertice_argsTupleSchemeFactory implements SchemeFactory {
      public upVertice_argsTupleScheme getScheme() {
        return new upVertice_argsTupleScheme();
      }
    }

    private static class upVertice_argsTupleScheme extends TupleScheme<upVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNomeUp()) {
          optionals.set(0);
        }
        if (struct.isSetV()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNomeUp()) {
          oprot.writeI32(struct.nomeUp);
        }
        if (struct.isSetV()) {
          struct.V.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nomeUp = iprot.readI32();
          struct.setNomeUpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.V = new Vertice();
          struct.V.read(iprot);
          struct.setVIsSet(true);
        }
      }
    }

  }

  public static class upVertice_result implements org.apache.thrift.TBase<upVertice_result, upVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<upVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upVertice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upVertice_result.class, metaDataMap);
    }

    public upVertice_result() {
    }

    public upVertice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upVertice_result(upVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public upVertice_result deepCopy() {
      return new upVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public upVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upVertice_result)
        return this.equals((upVertice_result)that);
      return false;
    }

    public boolean equals(upVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(upVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upVertice_resultStandardSchemeFactory implements SchemeFactory {
      public upVertice_resultStandardScheme getScheme() {
        return new upVertice_resultStandardScheme();
      }
    }

    private static class upVertice_resultStandardScheme extends StandardScheme<upVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upVertice_resultTupleSchemeFactory implements SchemeFactory {
      public upVertice_resultTupleScheme getScheme() {
        return new upVertice_resultTupleScheme();
      }
    }

    private static class upVertice_resultTupleScheme extends TupleScheme<upVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class upAresta_args implements org.apache.thrift.TBase<upAresta_args, upAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<upAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upAresta_args");

    private static final org.apache.thrift.protocol.TField NOME_V1_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOME_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("A", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upAresta_argsTupleSchemeFactory());
    }

    public int nomeV1; // required
    public int nomeV2; // required
    public Aresta A; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V1((short)1, "nomeV1"),
      NOME_V2((short)2, "nomeV2"),
      A((short)3, "A");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V1
            return NOME_V1;
          case 2: // NOME_V2
            return NOME_V2;
          case 3: // A
            return A;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV1_ISSET_ID = 0;
    private static final int __NOMEV2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V1, new org.apache.thrift.meta_data.FieldMetaData("nomeV1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOME_V2, new org.apache.thrift.meta_data.FieldMetaData("nomeV2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("A", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upAresta_args.class, metaDataMap);
    }

    public upAresta_args() {
    }

    public upAresta_args(
      int nomeV1,
      int nomeV2,
      Aresta A)
    {
      this();
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      this.A = A;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upAresta_args(upAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV1 = other.nomeV1;
      this.nomeV2 = other.nomeV2;
      if (other.isSetA()) {
        this.A = new Aresta(other.A);
      }
    }

    public upAresta_args deepCopy() {
      return new upAresta_args(this);
    }

    @Override
    public void clear() {
      setNomeV1IsSet(false);
      this.nomeV1 = 0;
      setNomeV2IsSet(false);
      this.nomeV2 = 0;
      this.A = null;
    }

    public int getNomeV1() {
      return this.nomeV1;
    }

    public upAresta_args setNomeV1(int nomeV1) {
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      return this;
    }

    public void unsetNomeV1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    /** Returns true if field nomeV1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV1() {
      return EncodingUtils.testBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    public void setNomeV1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOMEV1_ISSET_ID, value);
    }

    public int getNomeV2() {
      return this.nomeV2;
    }

    public upAresta_args setNomeV2(int nomeV2) {
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      return this;
    }

    public void unsetNomeV2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    /** Returns true if field nomeV2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV2() {
      return EncodingUtils.testBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    public void setNomeV2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOMEV2_ISSET_ID, value);
    }

    public Aresta getA() {
      return this.A;
    }

    public upAresta_args setA(Aresta A) {
      this.A = A;
      return this;
    }

    public void unsetA() {
      this.A = null;
    }

    /** Returns true if field A is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.A != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.A = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME_V1:
        if (value == null) {
          unsetNomeV1();
        } else {
          setNomeV1((Integer)value);
        }
        break;

      case NOME_V2:
        if (value == null) {
          unsetNomeV2();
        } else {
          setNomeV2((Integer)value);
        }
        break;

      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((Aresta)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V1:
        return Integer.valueOf(getNomeV1());

      case NOME_V2:
        return Integer.valueOf(getNomeV2());

      case A:
        return getA();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME_V1:
        return isSetNomeV1();
      case NOME_V2:
        return isSetNomeV2();
      case A:
        return isSetA();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upAresta_args)
        return this.equals((upAresta_args)that);
      return false;
    }

    public boolean equals(upAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_nomeV1 = true;
      boolean that_present_nomeV1 = true;
      if (this_present_nomeV1 || that_present_nomeV1) {
        if (!(this_present_nomeV1 && that_present_nomeV1))
          return false;
        if (this.nomeV1 != that.nomeV1)
          return false;
      }

      boolean this_present_nomeV2 = true;
      boolean that_present_nomeV2 = true;
      if (this_present_nomeV2 || that_present_nomeV2) {
        if (!(this_present_nomeV2 && that_present_nomeV2))
          return false;
        if (this.nomeV2 != that.nomeV2)
          return false;
      }

      boolean this_present_A = true && this.isSetA();
      boolean that_present_A = true && that.isSetA();
      if (this_present_A || that_present_A) {
        if (!(this_present_A && that_present_A))
          return false;
        if (!this.A.equals(that.A))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(upAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNomeV1()).compareTo(other.isSetNomeV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV1, other.nomeV1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNomeV2()).compareTo(other.isSetNomeV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV2, other.nomeV2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.A, other.A);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upAresta_args(");
      boolean first = true;

      sb.append("nomeV1:");
      sb.append(this.nomeV1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nomeV2:");
      sb.append(this.nomeV2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("A:");
      if (this.A == null) {
        sb.append("null");
      } else {
        sb.append(this.A);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (A != null) {
        A.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upAresta_argsStandardSchemeFactory implements SchemeFactory {
      public upAresta_argsStandardScheme getScheme() {
        return new upAresta_argsStandardScheme();
      }
    }

    private static class upAresta_argsStandardScheme extends StandardScheme<upAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV1 = iprot.readI32();
                struct.setNomeV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOME_V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV2 = iprot.readI32();
                struct.setNomeV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.A = new Aresta();
                struct.A.read(iprot);
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V1_FIELD_DESC);
        oprot.writeI32(struct.nomeV1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NOME_V2_FIELD_DESC);
        oprot.writeI32(struct.nomeV2);
        oprot.writeFieldEnd();
        if (struct.A != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          struct.A.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upAresta_argsTupleSchemeFactory implements SchemeFactory {
      public upAresta_argsTupleScheme getScheme() {
        return new upAresta_argsTupleScheme();
      }
    }

    private static class upAresta_argsTupleScheme extends TupleScheme<upAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNomeV1()) {
          optionals.set(0);
        }
        if (struct.isSetNomeV2()) {
          optionals.set(1);
        }
        if (struct.isSetA()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNomeV1()) {
          oprot.writeI32(struct.nomeV1);
        }
        if (struct.isSetNomeV2()) {
          oprot.writeI32(struct.nomeV2);
        }
        if (struct.isSetA()) {
          struct.A.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nomeV1 = iprot.readI32();
          struct.setNomeV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.nomeV2 = iprot.readI32();
          struct.setNomeV2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.A = new Aresta();
          struct.A.read(iprot);
          struct.setAIsSet(true);
        }
      }
    }

  }

  public static class upAresta_result implements org.apache.thrift.TBase<upAresta_result, upAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<upAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upAresta_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upAresta_result.class, metaDataMap);
    }

    public upAresta_result() {
    }

    public upAresta_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upAresta_result(upAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public upAresta_result deepCopy() {
      return new upAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public upAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upAresta_result)
        return this.equals((upAresta_result)that);
      return false;
    }

    public boolean equals(upAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(upAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upAresta_resultStandardSchemeFactory implements SchemeFactory {
      public upAresta_resultStandardScheme getScheme() {
        return new upAresta_resultStandardScheme();
      }
    }

    private static class upAresta_resultStandardScheme extends StandardScheme<upAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upAresta_resultTupleSchemeFactory implements SchemeFactory {
      public upAresta_resultTupleScheme getScheme() {
        return new upAresta_resultTupleScheme();
      }
    }

    private static class upAresta_resultTupleScheme extends TupleScheme<upAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVertice_args implements org.apache.thrift.TBase<getVertice_args, getVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVertice_argsTupleSchemeFactory());
    }

    public int nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVertice_args.class, metaDataMap);
    }

    public getVertice_args() {
    }

    public getVertice_args(
      int nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVertice_args(getVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public getVertice_args deepCopy() {
      return new getVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public int getNome() {
      return this.nome;
    }

    public getVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Integer.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVertice_args)
        return this.equals((getVertice_args)that);
      return false;
    }

    public boolean equals(getVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVertice_argsStandardSchemeFactory implements SchemeFactory {
      public getVertice_argsStandardScheme getScheme() {
        return new getVertice_argsStandardScheme();
      }
    }

    private static class getVertice_argsStandardScheme extends StandardScheme<getVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVertice_argsTupleSchemeFactory implements SchemeFactory {
      public getVertice_argsTupleScheme getScheme() {
        return new getVertice_argsTupleScheme();
      }
    }

    private static class getVertice_argsTupleScheme extends TupleScheme<getVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class getVertice_result implements org.apache.thrift.TBase<getVertice_result, getVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVertice_resultTupleSchemeFactory());
    }

    public Vertice success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVertice_result.class, metaDataMap);
    }

    public getVertice_result() {
    }

    public getVertice_result(
      Vertice success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVertice_result(getVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vertice(other.success);
      }
    }

    public getVertice_result deepCopy() {
      return new getVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Vertice getSuccess() {
      return this.success;
    }

    public getVertice_result setSuccess(Vertice success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVertice_result)
        return this.equals((getVertice_result)that);
      return false;
    }

    public boolean equals(getVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVertice_resultStandardSchemeFactory implements SchemeFactory {
      public getVertice_resultStandardScheme getScheme() {
        return new getVertice_resultStandardScheme();
      }
    }

    private static class getVertice_resultStandardScheme extends StandardScheme<getVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vertice();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVertice_resultTupleSchemeFactory implements SchemeFactory {
      public getVertice_resultTupleScheme getScheme() {
        return new getVertice_resultTupleScheme();
      }
    }

    private static class getVertice_resultTupleScheme extends TupleScheme<getVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Vertice();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAresta_args implements org.apache.thrift.TBase<getAresta_args, getAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAresta_args");

    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAresta_argsTupleSchemeFactory());
    }

    public int v1; // required
    public int v2; // required
    public boolean flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V1((short)1, "v1"),
      V2((short)2, "v2"),
      FLAG((short)3, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V1
            return V1;
          case 2: // V2
            return V2;
          case 3: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __V1_ISSET_ID = 0;
    private static final int __V2_ISSET_ID = 1;
    private static final int __FLAG_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAresta_args.class, metaDataMap);
    }

    public getAresta_args() {
    }

    public getAresta_args(
      int v1,
      int v2,
      boolean flag)
    {
      this();
      this.v1 = v1;
      setV1IsSet(true);
      this.v2 = v2;
      setV2IsSet(true);
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAresta_args(getAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.v1 = other.v1;
      this.v2 = other.v2;
      this.flag = other.flag;
    }

    public getAresta_args deepCopy() {
      return new getAresta_args(this);
    }

    @Override
    public void clear() {
      setV1IsSet(false);
      this.v1 = 0;
      setV2IsSet(false);
      this.v2 = 0;
      setFlagIsSet(false);
      this.flag = false;
    }

    public int getV1() {
      return this.v1;
    }

    public getAresta_args setV1(int v1) {
      this.v1 = v1;
      setV1IsSet(true);
      return this;
    }

    public void unsetV1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V1_ISSET_ID);
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return EncodingUtils.testBit(__isset_bitfield, __V1_ISSET_ID);
    }

    public void setV1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V1_ISSET_ID, value);
    }

    public int getV2() {
      return this.v2;
    }

    public getAresta_args setV2(int v2) {
      this.v2 = v2;
      setV2IsSet(true);
      return this;
    }

    public void unsetV2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V2_ISSET_ID);
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return EncodingUtils.testBit(__isset_bitfield, __V2_ISSET_ID);
    }

    public void setV2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V2_ISSET_ID, value);
    }

    public boolean isFlag() {
      return this.flag;
    }

    public getAresta_args setFlag(boolean flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((Integer)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((Integer)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V1:
        return Integer.valueOf(getV1());

      case V2:
        return Integer.valueOf(getV2());

      case FLAG:
        return Boolean.valueOf(isFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAresta_args)
        return this.equals((getAresta_args)that);
      return false;
    }

    public boolean equals(getAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_v1 = true;
      boolean that_present_v1 = true;
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (this.v1 != that.v1)
          return false;
      }

      boolean this_present_v2 = true;
      boolean that_present_v2 = true;
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (this.v2 != that.v2)
          return false;
      }

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAresta_args(");
      boolean first = true;

      sb.append("v1:");
      sb.append(this.v1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      sb.append(this.v2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAresta_argsStandardSchemeFactory implements SchemeFactory {
      public getAresta_argsStandardScheme getScheme() {
        return new getAresta_argsStandardScheme();
      }
    }

    private static class getAresta_argsStandardScheme extends StandardScheme<getAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.v1 = iprot.readI32();
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.v2 = iprot.readI32();
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.flag = iprot.readBool();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(V1_FIELD_DESC);
        oprot.writeI32(struct.v1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V2_FIELD_DESC);
        oprot.writeI32(struct.v2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeBool(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAresta_argsTupleSchemeFactory implements SchemeFactory {
      public getAresta_argsTupleScheme getScheme() {
        return new getAresta_argsTupleScheme();
      }
    }

    private static class getAresta_argsTupleScheme extends TupleScheme<getAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV1()) {
          optionals.set(0);
        }
        if (struct.isSetV2()) {
          optionals.set(1);
        }
        if (struct.isSetFlag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetV1()) {
          oprot.writeI32(struct.v1);
        }
        if (struct.isSetV2()) {
          oprot.writeI32(struct.v2);
        }
        if (struct.isSetFlag()) {
          oprot.writeBool(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.v1 = iprot.readI32();
          struct.setV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.v2 = iprot.readI32();
          struct.setV2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.flag = iprot.readBool();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class getAresta_result implements org.apache.thrift.TBase<getAresta_result, getAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAresta_resultTupleSchemeFactory());
    }

    public Aresta success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAresta_result.class, metaDataMap);
    }

    public getAresta_result() {
    }

    public getAresta_result(
      Aresta success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAresta_result(getAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = new Aresta(other.success);
      }
    }

    public getAresta_result deepCopy() {
      return new getAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Aresta getSuccess() {
      return this.success;
    }

    public getAresta_result setSuccess(Aresta success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Aresta)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAresta_result)
        return this.equals((getAresta_result)that);
      return false;
    }

    public boolean equals(getAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAresta_resultStandardSchemeFactory implements SchemeFactory {
      public getAresta_resultStandardScheme getScheme() {
        return new getAresta_resultStandardScheme();
      }
    }

    private static class getAresta_resultStandardScheme extends StandardScheme<getAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Aresta();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAresta_resultTupleSchemeFactory implements SchemeFactory {
      public getAresta_resultTupleScheme getScheme() {
        return new getAresta_resultTupleScheme();
      }
    }

    private static class getAresta_resultTupleScheme extends TupleScheme<getAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Aresta();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exibeGrafo_args implements org.apache.thrift.TBase<exibeGrafo_args, exibeGrafo_args._Fields>, java.io.Serializable, Cloneable, Comparable<exibeGrafo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exibeGrafo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exibeGrafo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exibeGrafo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exibeGrafo_args.class, metaDataMap);
    }

    public exibeGrafo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exibeGrafo_args(exibeGrafo_args other) {
    }

    public exibeGrafo_args deepCopy() {
      return new exibeGrafo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exibeGrafo_args)
        return this.equals((exibeGrafo_args)that);
      return false;
    }

    public boolean equals(exibeGrafo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exibeGrafo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exibeGrafo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exibeGrafo_argsStandardSchemeFactory implements SchemeFactory {
      public exibeGrafo_argsStandardScheme getScheme() {
        return new exibeGrafo_argsStandardScheme();
      }
    }

    private static class exibeGrafo_argsStandardScheme extends StandardScheme<exibeGrafo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exibeGrafo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exibeGrafo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exibeGrafo_argsTupleSchemeFactory implements SchemeFactory {
      public exibeGrafo_argsTupleScheme getScheme() {
        return new exibeGrafo_argsTupleScheme();
      }
    }

    private static class exibeGrafo_argsTupleScheme extends TupleScheme<exibeGrafo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exibeGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exibeGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class exibeGrafo_result implements org.apache.thrift.TBase<exibeGrafo_result, exibeGrafo_result._Fields>, java.io.Serializable, Cloneable, Comparable<exibeGrafo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exibeGrafo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exibeGrafo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exibeGrafo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exibeGrafo_result.class, metaDataMap);
    }

    public exibeGrafo_result() {
    }

    public exibeGrafo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exibeGrafo_result(exibeGrafo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public exibeGrafo_result deepCopy() {
      return new exibeGrafo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public exibeGrafo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exibeGrafo_result)
        return this.equals((exibeGrafo_result)that);
      return false;
    }

    public boolean equals(exibeGrafo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exibeGrafo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exibeGrafo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exibeGrafo_resultStandardSchemeFactory implements SchemeFactory {
      public exibeGrafo_resultStandardScheme getScheme() {
        return new exibeGrafo_resultStandardScheme();
      }
    }

    private static class exibeGrafo_resultStandardScheme extends StandardScheme<exibeGrafo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exibeGrafo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exibeGrafo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exibeGrafo_resultTupleSchemeFactory implements SchemeFactory {
      public exibeGrafo_resultTupleScheme getScheme() {
        return new exibeGrafo_resultTupleScheme();
      }
    }

    private static class exibeGrafo_resultTupleScheme extends TupleScheme<exibeGrafo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exibeGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exibeGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exibeVertice_args implements org.apache.thrift.TBase<exibeVertice_args, exibeVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<exibeVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exibeVertice_args");

    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exibeVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exibeVertice_argsTupleSchemeFactory());
    }

    public boolean flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FLAG((short)1, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exibeVertice_args.class, metaDataMap);
    }

    public exibeVertice_args() {
    }

    public exibeVertice_args(
      boolean flag)
    {
      this();
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exibeVertice_args(exibeVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.flag = other.flag;
    }

    public exibeVertice_args deepCopy() {
      return new exibeVertice_args(this);
    }

    @Override
    public void clear() {
      setFlagIsSet(false);
      this.flag = false;
    }

    public boolean isFlag() {
      return this.flag;
    }

    public exibeVertice_args setFlag(boolean flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FLAG:
        return Boolean.valueOf(isFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exibeVertice_args)
        return this.equals((exibeVertice_args)that);
      return false;
    }

    public boolean equals(exibeVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exibeVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exibeVertice_args(");
      boolean first = true;

      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exibeVertice_argsStandardSchemeFactory implements SchemeFactory {
      public exibeVertice_argsStandardScheme getScheme() {
        return new exibeVertice_argsStandardScheme();
      }
    }

    private static class exibeVertice_argsStandardScheme extends StandardScheme<exibeVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exibeVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.flag = iprot.readBool();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exibeVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeBool(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exibeVertice_argsTupleSchemeFactory implements SchemeFactory {
      public exibeVertice_argsTupleScheme getScheme() {
        return new exibeVertice_argsTupleScheme();
      }
    }

    private static class exibeVertice_argsTupleScheme extends TupleScheme<exibeVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exibeVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFlag()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFlag()) {
          oprot.writeBool(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exibeVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.flag = iprot.readBool();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class exibeVertice_result implements org.apache.thrift.TBase<exibeVertice_result, exibeVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<exibeVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exibeVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exibeVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exibeVertice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exibeVertice_result.class, metaDataMap);
    }

    public exibeVertice_result() {
    }

    public exibeVertice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exibeVertice_result(exibeVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public exibeVertice_result deepCopy() {
      return new exibeVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public exibeVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exibeVertice_result)
        return this.equals((exibeVertice_result)that);
      return false;
    }

    public boolean equals(exibeVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exibeVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exibeVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exibeVertice_resultStandardSchemeFactory implements SchemeFactory {
      public exibeVertice_resultStandardScheme getScheme() {
        return new exibeVertice_resultStandardScheme();
      }
    }

    private static class exibeVertice_resultStandardScheme extends StandardScheme<exibeVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exibeVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exibeVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exibeVertice_resultTupleSchemeFactory implements SchemeFactory {
      public exibeVertice_resultTupleScheme getScheme() {
        return new exibeVertice_resultTupleScheme();
      }
    }

    private static class exibeVertice_resultTupleScheme extends TupleScheme<exibeVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exibeVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exibeVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exibeAresta_args implements org.apache.thrift.TBase<exibeAresta_args, exibeAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<exibeAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exibeAresta_args");

    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exibeAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exibeAresta_argsTupleSchemeFactory());
    }

    public boolean flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FLAG((short)1, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exibeAresta_args.class, metaDataMap);
    }

    public exibeAresta_args() {
    }

    public exibeAresta_args(
      boolean flag)
    {
      this();
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exibeAresta_args(exibeAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.flag = other.flag;
    }

    public exibeAresta_args deepCopy() {
      return new exibeAresta_args(this);
    }

    @Override
    public void clear() {
      setFlagIsSet(false);
      this.flag = false;
    }

    public boolean isFlag() {
      return this.flag;
    }

    public exibeAresta_args setFlag(boolean flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FLAG:
        return Boolean.valueOf(isFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exibeAresta_args)
        return this.equals((exibeAresta_args)that);
      return false;
    }

    public boolean equals(exibeAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exibeAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exibeAresta_args(");
      boolean first = true;

      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exibeAresta_argsStandardSchemeFactory implements SchemeFactory {
      public exibeAresta_argsStandardScheme getScheme() {
        return new exibeAresta_argsStandardScheme();
      }
    }

    private static class exibeAresta_argsStandardScheme extends StandardScheme<exibeAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exibeAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.flag = iprot.readBool();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exibeAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeBool(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exibeAresta_argsTupleSchemeFactory implements SchemeFactory {
      public exibeAresta_argsTupleScheme getScheme() {
        return new exibeAresta_argsTupleScheme();
      }
    }

    private static class exibeAresta_argsTupleScheme extends TupleScheme<exibeAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exibeAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFlag()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFlag()) {
          oprot.writeBool(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exibeAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.flag = iprot.readBool();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class exibeAresta_result implements org.apache.thrift.TBase<exibeAresta_result, exibeAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<exibeAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exibeAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exibeAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exibeAresta_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exibeAresta_result.class, metaDataMap);
    }

    public exibeAresta_result() {
    }

    public exibeAresta_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exibeAresta_result(exibeAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public exibeAresta_result deepCopy() {
      return new exibeAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public exibeAresta_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exibeAresta_result)
        return this.equals((exibeAresta_result)that);
      return false;
    }

    public boolean equals(exibeAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exibeAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exibeAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exibeAresta_resultStandardSchemeFactory implements SchemeFactory {
      public exibeAresta_resultStandardScheme getScheme() {
        return new exibeAresta_resultStandardScheme();
      }
    }

    private static class exibeAresta_resultStandardScheme extends StandardScheme<exibeAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exibeAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exibeAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exibeAresta_resultTupleSchemeFactory implements SchemeFactory {
      public exibeAresta_resultTupleScheme getScheme() {
        return new exibeAresta_resultTupleScheme();
      }
    }

    private static class exibeAresta_resultTupleScheme extends TupleScheme<exibeAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exibeAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exibeAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listarArestasVertice_args implements org.apache.thrift.TBase<listarArestasVertice_args, listarArestasVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarArestasVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarArestasVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_V_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarArestasVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarArestasVertice_argsTupleSchemeFactory());
    }

    public int nomeV; // required
    public boolean flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V((short)1, "nomeV"),
      FLAG((short)2, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V
            return NOME_V;
          case 2: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV_ISSET_ID = 0;
    private static final int __FLAG_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V, new org.apache.thrift.meta_data.FieldMetaData("nomeV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarArestasVertice_args.class, metaDataMap);
    }

    public listarArestasVertice_args() {
    }

    public listarArestasVertice_args(
      int nomeV,
      boolean flag)
    {
      this();
      this.nomeV = nomeV;
      setNomeVIsSet(true);
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarArestasVertice_args(listarArestasVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV = other.nomeV;
      this.flag = other.flag;
    }

    public listarArestasVertice_args deepCopy() {
      return new listarArestasVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeVIsSet(false);
      this.nomeV = 0;
      setFlagIsSet(false);
      this.flag = false;
    }

    public int getNomeV() {
      return this.nomeV;
    }

    public listarArestasVertice_args setNomeV(int nomeV) {
      this.nomeV = nomeV;
      setNomeVIsSet(true);
      return this;
    }

    public void unsetNomeV() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    /** Returns true if field nomeV is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV() {
      return EncodingUtils.testBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    public void setNomeVIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOMEV_ISSET_ID, value);
    }

    public boolean isFlag() {
      return this.flag;
    }

    public listarArestasVertice_args setFlag(boolean flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME_V:
        if (value == null) {
          unsetNomeV();
        } else {
          setNomeV((Integer)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V:
        return Integer.valueOf(getNomeV());

      case FLAG:
        return Boolean.valueOf(isFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME_V:
        return isSetNomeV();
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarArestasVertice_args)
        return this.equals((listarArestasVertice_args)that);
      return false;
    }

    public boolean equals(listarArestasVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nomeV = true;
      boolean that_present_nomeV = true;
      if (this_present_nomeV || that_present_nomeV) {
        if (!(this_present_nomeV && that_present_nomeV))
          return false;
        if (this.nomeV != that.nomeV)
          return false;
      }

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarArestasVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNomeV()).compareTo(other.isSetNomeV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV, other.nomeV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarArestasVertice_args(");
      boolean first = true;

      sb.append("nomeV:");
      sb.append(this.nomeV);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarArestasVertice_argsStandardSchemeFactory implements SchemeFactory {
      public listarArestasVertice_argsStandardScheme getScheme() {
        return new listarArestasVertice_argsStandardScheme();
      }
    }

    private static class listarArestasVertice_argsStandardScheme extends StandardScheme<listarArestasVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV = iprot.readI32();
                struct.setNomeVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.flag = iprot.readBool();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V_FIELD_DESC);
        oprot.writeI32(struct.nomeV);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeBool(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarArestasVertice_argsTupleSchemeFactory implements SchemeFactory {
      public listarArestasVertice_argsTupleScheme getScheme() {
        return new listarArestasVertice_argsTupleScheme();
      }
    }

    private static class listarArestasVertice_argsTupleScheme extends TupleScheme<listarArestasVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNomeV()) {
          optionals.set(0);
        }
        if (struct.isSetFlag()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNomeV()) {
          oprot.writeI32(struct.nomeV);
        }
        if (struct.isSetFlag()) {
          oprot.writeBool(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nomeV = iprot.readI32();
          struct.setNomeVIsSet(true);
        }
        if (incoming.get(1)) {
          struct.flag = iprot.readBool();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class listarArestasVertice_result implements org.apache.thrift.TBase<listarArestasVertice_result, listarArestasVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarArestasVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarArestasVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarArestasVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarArestasVertice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarArestasVertice_result.class, metaDataMap);
    }

    public listarArestasVertice_result() {
    }

    public listarArestasVertice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarArestasVertice_result(listarArestasVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public listarArestasVertice_result deepCopy() {
      return new listarArestasVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listarArestasVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarArestasVertice_result)
        return this.equals((listarArestasVertice_result)that);
      return false;
    }

    public boolean equals(listarArestasVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarArestasVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarArestasVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarArestasVertice_resultStandardSchemeFactory implements SchemeFactory {
      public listarArestasVertice_resultStandardScheme getScheme() {
        return new listarArestasVertice_resultStandardScheme();
      }
    }

    private static class listarArestasVertice_resultStandardScheme extends StandardScheme<listarArestasVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarArestasVertice_resultTupleSchemeFactory implements SchemeFactory {
      public listarArestasVertice_resultTupleScheme getScheme() {
        return new listarArestasVertice_resultTupleScheme();
      }
    }

    private static class listarArestasVertice_resultTupleScheme extends TupleScheme<listarArestasVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listarVizinhosVertice_args implements org.apache.thrift.TBase<listarVizinhosVertice_args, listarVizinhosVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarVizinhosVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVizinhosVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_V_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarVizinhosVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarVizinhosVertice_argsTupleSchemeFactory());
    }

    public int nomeV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V((short)1, "nomeV");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V
            return NOME_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V, new org.apache.thrift.meta_data.FieldMetaData("nomeV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVizinhosVertice_args.class, metaDataMap);
    }

    public listarVizinhosVertice_args() {
    }

    public listarVizinhosVertice_args(
      int nomeV)
    {
      this();
      this.nomeV = nomeV;
      setNomeVIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVizinhosVertice_args(listarVizinhosVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV = other.nomeV;
    }

    public listarVizinhosVertice_args deepCopy() {
      return new listarVizinhosVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeVIsSet(false);
      this.nomeV = 0;
    }

    public int getNomeV() {
      return this.nomeV;
    }

    public listarVizinhosVertice_args setNomeV(int nomeV) {
      this.nomeV = nomeV;
      setNomeVIsSet(true);
      return this;
    }

    public void unsetNomeV() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    /** Returns true if field nomeV is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV() {
      return EncodingUtils.testBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    public void setNomeVIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOMEV_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME_V:
        if (value == null) {
          unsetNomeV();
        } else {
          setNomeV((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V:
        return Integer.valueOf(getNomeV());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME_V:
        return isSetNomeV();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVizinhosVertice_args)
        return this.equals((listarVizinhosVertice_args)that);
      return false;
    }

    public boolean equals(listarVizinhosVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nomeV = true;
      boolean that_present_nomeV = true;
      if (this_present_nomeV || that_present_nomeV) {
        if (!(this_present_nomeV && that_present_nomeV))
          return false;
        if (this.nomeV != that.nomeV)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarVizinhosVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNomeV()).compareTo(other.isSetNomeV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV, other.nomeV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarVizinhosVertice_args(");
      boolean first = true;

      sb.append("nomeV:");
      sb.append(this.nomeV);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVizinhosVertice_argsStandardSchemeFactory implements SchemeFactory {
      public listarVizinhosVertice_argsStandardScheme getScheme() {
        return new listarVizinhosVertice_argsStandardScheme();
      }
    }

    private static class listarVizinhosVertice_argsStandardScheme extends StandardScheme<listarVizinhosVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVizinhosVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV = iprot.readI32();
                struct.setNomeVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVizinhosVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V_FIELD_DESC);
        oprot.writeI32(struct.nomeV);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVizinhosVertice_argsTupleSchemeFactory implements SchemeFactory {
      public listarVizinhosVertice_argsTupleScheme getScheme() {
        return new listarVizinhosVertice_argsTupleScheme();
      }
    }

    private static class listarVizinhosVertice_argsTupleScheme extends TupleScheme<listarVizinhosVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVizinhosVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNomeV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNomeV()) {
          oprot.writeI32(struct.nomeV);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVizinhosVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nomeV = iprot.readI32();
          struct.setNomeVIsSet(true);
        }
      }
    }

  }

  public static class listarVizinhosVertice_result implements org.apache.thrift.TBase<listarVizinhosVertice_result, listarVizinhosVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarVizinhosVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVizinhosVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarVizinhosVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarVizinhosVertice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVizinhosVertice_result.class, metaDataMap);
    }

    public listarVizinhosVertice_result() {
    }

    public listarVizinhosVertice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVizinhosVertice_result(listarVizinhosVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public listarVizinhosVertice_result deepCopy() {
      return new listarVizinhosVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listarVizinhosVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVizinhosVertice_result)
        return this.equals((listarVizinhosVertice_result)that);
      return false;
    }

    public boolean equals(listarVizinhosVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarVizinhosVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarVizinhosVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVizinhosVertice_resultStandardSchemeFactory implements SchemeFactory {
      public listarVizinhosVertice_resultStandardScheme getScheme() {
        return new listarVizinhosVertice_resultStandardScheme();
      }
    }

    private static class listarVizinhosVertice_resultStandardScheme extends StandardScheme<listarVizinhosVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVizinhosVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVizinhosVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVizinhosVertice_resultTupleSchemeFactory implements SchemeFactory {
      public listarVizinhosVertice_resultTupleScheme getScheme() {
        return new listarVizinhosVertice_resultTupleScheme();
      }
    }

    private static class listarVizinhosVertice_resultTupleScheme extends TupleScheme<listarVizinhosVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVizinhosVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVizinhosVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
